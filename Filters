Work in progress. I'm using this as a data dump as I learn.


LLDP FITLER -- eth.type == 0x88cc 
CDP Filter -- cdp.version == 2 
Signs port scanning of tcp -- tcp.flages.syn == 1 
Signs port scanning of udp -- udp.flags.syn == 1 
lldp-- eth.addr== 01:80:c2:00:00:0e  
cdp-- eth.addr== 01:00:0c:cc:cc:cc 
Bad TCP Flags without window update -- (tcp.analysis.flags) && !(tcp.analysis.window_update)  
search for multi TCP ports example -- tcp.port in {80,443,8000..8004}   
exclude some basic chatter !(arp or stp or lldp or cdp or eth.addr==ff:ff:ff:ff:ff:ff)  
Slow http times --http.time > 1 

Comparison operators
eq, ==    Equal
ne, !=    Not Equal
gt, >     Greater Than
lt, <     Less Than
ge, >=    Greater than or Equal to
le, <=    Less than or Equal to

eq, any_eq, ==    Any field must be equal
ne, all_ne, !=    All fields must be not equal
    all_eq, ===   All fields must be equal
    any_ne, !==   Any fields must be not equal

match operators
contains     Does the protocol, field or slice contain a value
matches, ~   Does the string match the given case-insensitive
             Perl-compatible regular expression

!(dns or arp) exclude infomation from showing 

ip.addr == (ip address) -- lookup both src and dst traffic for specific ip address

ip.addr == 192.168.1.0/24 -- search a subnet 

tcp.port in {80,443,8000..8005} -- search multi ports 

eth matches "London" -- search for a string not cap-sensitive 

!(arp or stp or lldp or cdp or eth.addr==ff:ff:ff:ff:ff:ff or dns or tcp.port in {443,80}) -- filter out some "noise"

dns.time > 0.2 -- show DNS time slower than  0.2

tcp.flags.reset==1 -- tcp reset field 


Open another in Mac Terminal open -n /applications/wireshark.app

https://www.wireshark.org/tools/wpa-psk.html


Protocol filters

ip - Displays all IP packets.
tcp - Displays all TCP packets.
udp - Displays all UDP packets.
http - Displays all HTTP packets.
dns - Displays all DNS packets.
IP address and port filters

ip.addr == 192.168.1.100 - Displays all IP packets with a source or destination IP address of 192.168.1.100.
tcp.port == 80 - Displays all TCP packets with a source or destination port of 80 (HTTP).
udp.port == 53 - Displays all UDP packets with a source or destination port of 53 (DNS).
Flag filters

tcp.flags.syn == 1 - Displays all TCP packets with the SYN flag set.
tcp.flags.ack == 1 - Displays all TCP packets with the ACK flag set.
tcp.flags.psh == 1 - Displays all TCP packets with the PUSH flag set.
tcp.flags.rst == 1 - Displays all TCP packets with the RST flag set.
Field filters

http.request.method == "GET" - Displays all HTTP requests with the GET method.
http.response.code == 200 - Displays all HTTP responses with a status code of 200 (OK).
dns.qry.name == "example.com" - Displays all DNS queries for the domain name "example.com".
tcp.payload contains "hello world" - Displays all TCP packets that contain the string "hello world" in the payload.
Comparison filters

ip.len > 1000 - Displays all IP packets with a length greater than 1000 bytes.
tcp.seq < 1000000 - Displays all TCP packets with a sequence number less than 1000000.
udp.srcport == udp.dstport - Displays all UDP packets where the source port is equal to the destination port.
Logical operators

&& - AND operator.
|| - OR operator.
! - NOT operator.
Parentheses

Parentheses can be used to group filter expressions. For example, the following filter will display all TCP SYN packets to or from the IP address 192.168.1.100:

(tcp.flags.syn == 1) && (ip.addr == 192.168.1.100)
You can use these filters and combine them in various ways to create complex filters that allow you to isolate specific types of traffic. For more information on Wireshark filters, please see the Wireshark Display Filter Reference: https://www.wireshark.org/docs/dfref/.
